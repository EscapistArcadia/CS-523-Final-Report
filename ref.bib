@inproceedings{every_walks_a_hit,
author = {Park, Chang Hyun and Vougioukas, Ilias and Sandberg, Andreas and Black-Schaffer, David},
title = {Every walk's a hit: making page walks single-access cache hits},
year = {2022},
isbn = {9781450392051},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3503222.3507718},
doi = {10.1145/3503222.3507718},
abstract = {As memory capacity has outstripped TLB coverage, large data applications suffer from frequent page table walks. We investigate two complementary techniques for addressing this cost: reducing the number of accesses required and reducing the latency of each access. The first approach is accomplished by opportunistically "flattening" the page table: merging two levels of traditional 4 KB page table nodes into a single 2 MB node, thereby reducing the table's depth and the number of indirections required to traverse it. The second is accomplished by biasing the cache replacement algorithm to keep page table entries during periods of high TLB miss rates, as these periods also see high data miss rates and are therefore more likely to benefit from having the smaller page table in the cache than to suffer from increased data cache misses.  We evaluate these approaches for both native and virtualized systems and across a range of realistic memory fragmentation scenarios, describe the limited changes needed in our kernel implementation and hardware design, identify and address challenges related to self-referencing page tables and kernel memory allocation, and compare results across server and mobile systems using both academic and industrial simulators for robustness.  We find that flattening does reduce the number of accesses required on a page walk (to 1.0), but its performance impact (+2.3\%) is small due to Page Walker Caches (already 1.5 accesses). Prioritizing caching has a larger effect (+6.8\%), and the combination improves performance by +9.2\%. Flattening is more effective on virtualized systems (4.4 to 2.8 accesses, +7.1\% performance), due to 2D page walks. By combining the two techniques we demonstrate a state-of-the-art +14.0\% performance gain and -8.7\% dynamic cache energy and -4.7\% dynamic DRAM energy for virtualized execution with very simple hardware and software changes.},
booktitle = {Proceedings of the 27th ACM International Conference on Architectural Support for Programming Languages and Operating Systems},
pages = {128-141},
numpages = {14},
keywords = {Flattened page table, page table cache prioritization},
location = {Lausanne, Switzerland},
series = {ASPLOS '22}
}

@article{clustered,
author = {Talluri, M. and Hill, M. D. and Khalidi, Y. A.},
title = {A new page table for 64-bit address spaces},
year = {1995},
issue_date = {Dec. 3, 1995},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {29},
number = {5},
issn = {0163-5980},
url = {https://doi.org/10.1145/224057.224071},
doi = {10.1145/224057.224071},
journal = {SIGOPS Oper. Syst. Rev.},
month = dec,
pages = {184-200},
numpages = {17}
}

@inproceedings{ecpt,
author = {Skarlatos, Dimitrios and Kokolis, Apostolos and Xu, Tianyin and Torrellas, Josep},
title = {Elastic Cuckoo Page Tables: Rethinking Virtual Memory Translation for Parallelism},
year = {2020},
isbn = {9781450371025},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3373376.3378493},
doi = {10.1145/3373376.3378493},
abstract = {The unprecedented growth in the memory needs of emerging memory-intensive workloads has made virtual memory translation a major performance bottleneck. To address this problem, this paper introduces Elastic Cuckoo Page Tables, a novel page table design that transforms the sequential pointer-chasing operation used by conventional multi-level radix page tables into fully-parallel look-ups. The resulting design harvests, for the first time, the benefits of memory level parallelism for address translation. Elastic cuckoo page tables use Elastic Cuckoo Hashing, a novel extension of cuckoo hashing that supports efficient page table resizing. Elastic cuckoo page tables efficiently resolve hash collisions, provide process-private page tables, support multiple page sizes and page sharing among processes, and dynamically adapt page table sizes to meet application requirements. We evaluate elastic cuckoo page tables with full-system simulations of an 8-core processor using a set of graph analytics, bioinformatics, HPC, and system workloads. Elastic cuckoo page tables reduce the address translation overhead by an average of 41\% over conventional radix page tables. The result is a 3-18\% speed-up in application execution.},
booktitle = {Proceedings of the Twenty-Fifth International Conference on Architectural Support for Programming Languages and Operating Systems},
pages = {1093-1108},
numpages = {16},
keywords = {cuckoo hashing, page tables, virtual memory},
location = {Lausanne, Switzerland},
series = {ASPLOS '20}
}

@inproceedings{emt,
  author = {Siyuan Chai and Jiyuan Zhang and Jongyul Kim and Alan Wang and Fan Chung and Jovan Stojkovic and Weiwei Jia and Dimitrios Skarlatos and Josep Torrellas and Tianyin Xu},
  title = {EMT: An OS Framework for New Memory Translation Architectures},
  booktitle = {Proceedings of the 19th USENIX Symposium on Operating Systems Design and Implementation (OSDI '25)},
  year = {2025}
}

@INPROCEEDINGS{graphbig,
  author={Nai, Lifeng and Xia, Yinglong and Tanase, Ilie G. and Kim, Hyesoon and Lin, Ching-Yung},
  booktitle={SC '15: Proceedings of the International Conference for High Performance Computing, Networking, Storage and Analysis}, 
  title={GraphBIG: understanding graph computing in the context of industrial solutions}, 
  year={2015},
  volume={},
  number={},
  pages={1-12},
  keywords={Benchmark testing;Prototypes;Hardware;Big data;Graphics processing units;Arrays},
  doi={10.1145/2807591.2807626}}

@misc{redis,
  title = {{Redis}},
  howpublished = "\url{http://redis.io/}",
  month = APR,
  year = 2024,
  author = {{Redis}},
}

@Misc{postgresql,
title = {{PostgresSQL}},
OPTurl = "https://www.postgresql.org/",
howpublished = "\url{https://www.postgresql.org/}",
year = 2024,
key = "PostgresSQL",
}

@misc{memcached,
  title = {{memcached - a distributed memory object caching system}},
  howpublished = "\url{https://memcached.org}",
  month = APR,
  year = 2024,
  author = {{Memcached}},
}
@misc{gups,
	howpublished = "\url{https://hpcchallenge.org/projectsfiles/hpcc/RandomAccess.html}",
	title = {{RandomAccess: GUPS (Giga Updates Per Second)}},
	month = AUG,
	year = 2022,
	author = {{HPC Challenge Benchmark}},
}

@misc{sysbench,
	title = {{SysBench: Scriptable database and system performance benchmark}},
	howpublished="\url{https://github.com/akopytov/sysbench/tree/1.0.20}",
	author = {Alexey Kopytov},
	month = APR,
	year = 2020,
}